{"version":3,"sources":["./src/app/shared/services/language-field.service.ts","./src/app/shared/services/modal.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA2C;AACiD;;AAMrF,MAAM,oBAAoB;IAE/B,gBACI,CAAC;IAEL,yBAAyB,CAAC,YAA8C,EAAE,IAAe;QACvF,YAAY,CAAC,OAAO,CAAE,CAAC,CAAC,EAAE;YACxB,MAAM,KAAK,GAAG,IAAI,wDAAS,CAAC;gBAC1B,QAAQ,EAAE,IAAI,0DAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBACvE,KAAK,EAAE,IAAI,0DAAW,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;aACvD,CAAC,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,cAAc,CAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;;wFAbU,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB,mBAFnB,MAAM;6FAEP,oBAAoB;cAHhC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAA2C;AACJ;;AAKhC,MAAM,YAAY;IAUvB;QARQ,eAAU,GAAG,IAAI,oDAAe,CAIrC,EAAC,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;QAEvB,UAAK,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;IAEvB,CAAC;IAGjB,SAAS,CAAC,OAAe,EAAE,KAAc;QACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,YAAY;YACnB,IAAI,EAAE;gBACJ,OAAO;gBACP,KAAK;aACN;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK;QACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;IACL,CAAC;;wEA3BU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LanguageFieldService {\r\n\r\n  constructor(\r\n  ) { }\r\n\r\n  appendCurrentTranslations(translations: {language: any, value: string}[], form: FormGroup): void{\r\n    translations.forEach( x => {\r\n      const group = new FormGroup({\r\n        language: new FormControl(x.language.toString(), [Validators.required]),\r\n        value: new FormControl(x.value, [Validators.required]),\r\n      });\r\n      (form.get('translations') as FormArray).push(group);\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalService {\r\n\r\n  private dataSource = new BehaviorSubject<\r\n  {\r\n    event: 'DEFAULT' | 'SHOW_MODAL' | 'RESET',\r\n    data?: any\r\n  }>({event: 'DEFAULT'});\r\n\r\n  event = this.dataSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n\r\n  showModal(modalId: string, value: boolean): void{\r\n    this.dataSource.next({\r\n      event: 'SHOW_MODAL',\r\n      data: {\r\n        modalId,\r\n        value\r\n      }\r\n    });\r\n  }\r\n\r\n  reset(): void{\r\n    this.dataSource.next({\r\n      event: 'RESET',\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}